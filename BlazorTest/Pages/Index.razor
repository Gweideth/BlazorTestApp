@page "/"
<PageTitle>Index</PageTitle>

<MudButton OnClick="clickedResetButton">RESET</MudButton>

<MudContainer Class="d-flex flex-column">
    <MudContainer Class="d-flex">
        <h3>Komponent</h3>
    </MudContainer>
    <MudContainer>
        <MudTextField @bind-Value="Value" Variant="Variant.Text" Immediate=true TextChanged="MyMethod"></MudTextField>
    </MudContainer>
    <MudContainer>
        <p>@time</p>
    </MudContainer>
    <MudContainer Class="d-flex" Wrap="Wrap">
        @foreach (var button in buttons)
        {
            <MudButton OnClick="@(() => Clicked(button.Key))">@button.Value.Caption</MudButton>
        }
    </MudContainer>
    <MudContainer>
        <h2>Wartość: @otherValue</h2>
    </MudContainer>
    <MudContainer>
        <ul>
            @foreach (var message in ClickedButtons)
            {
                <li>Kliknięto przycisk: @message</li>
            }
        </ul>

    </MudContainer>
</MudContainer>

        





@code {

    private EventCallback<int> OnButtonClick { get; set; }

    private string otherValue { get; set; }
    private string Value { get; set; }

    public Guid? Reset { get; set; }

    public Dictionary<int, ButtonDefinition> buttons { get; set; }

    private async Task Clicked(int Id)
    {
        ClickedButtons.Add(Id);
        await OnButtonClick.InvokeAsync(Id);
    }
    
    public void MyMethod()
    {
        otherValue = Value;
    }

    Guid initializeGuid = Guid.NewGuid();

    public void clickedResetButton()
    {
        Guid newGuid = Guid.NewGuid();
        if (newGuid != initializeGuid)
        {
            Value = "";
            elapsedTimeInSeconds = 0;
            ClickedButtons.Clear();
        }
    }

    public List<int> ClickedButtons = new();
    public int Message { get; set; }

    public class ButtonDefinition
    {
        public string Caption { get; set; }
        public string Icon { get; set; }
    }

    protected override void OnInitialized()
    {
        buttons = new()
        {
            { 1, new ButtonDefinition {Caption= "T1", Icon = "icon1.png"}},
            { 2, new ButtonDefinition {Caption= "T2", Icon = "icon2.png"}},
            { 3, new ButtonDefinition {Caption= "T3", Icon = "icon3.png"}},
            { 4, new ButtonDefinition {Caption= "T4", Icon = "icon4.png"}},
            { 5, new ButtonDefinition {Caption= "T5", Icon = "icon5.png"}},
            { 6, new ButtonDefinition {Caption= "T6", Icon = "icon6.png"}},
            { 7, new ButtonDefinition {Caption= "T7", Icon = "icon7.png"}},
            { 8, new ButtonDefinition {Caption= "T8", Icon = "icon8.png"}},
        };
        elapsedTimeInSeconds = 0;
        timer = new Timer(UpdateElapsedTime, null, 0, 1000);
    }

    private Timer timer;
    private int elapsedTimeInSeconds;
    private string time;

    private void StopTimer()
    {
        timer?.Change(Timeout.Infinite, Timeout.Infinite);
    }

    private void UpdateElapsedTime(object state)
    {
        elapsedTimeInSeconds++;
        time = $"Czas pracy (sekundy): {elapsedTimeInSeconds}";
        InvokeAsync(StateHasChanged);
    }
}
